pipeline {
    agent any
    environment {
        HOME = '/tmp'
    }

    stages {
       stage('build') {
          steps {
            //  echo 'Notify GitLab'
            //  updateGitlabCommitStatus name: 'build', state: 'pending'
             echo 'build step goes here'
             sh(script: "dotnet build Transcript.API/Transcript.API.csproj -c Release -o ./dist", returnStdout: true)
            //  updateGitlabCommitStatus name: 'build', state: 'success'
          }
       }
       stage('test') {
           steps {
               echo 'Notify GitLab'
            //    updateGitlabCommitStatus name: 'test', state: 'pending'
               echo 'test step goes here'
               sh(script: 'dotnet test Transcript.API.Tests/Transcript.API.Tests.csproj -c Release --results-directory ./test-results --collect "Code Coverage" --logger "trx;LogFileName=test-results.xml"'
, returnStdout: true)
            //    updateGitlabCommitStatus name: 'test', state: 'success'
           }
       }
    }
    post {
        always{
            xunit (
                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],
                tools: [ xUnitDotNet(pattern: '**/*.xml') ])
            )
        }
    }
 }